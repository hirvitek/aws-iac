#  MIT License
#
#  Copyright (c) 2021 Hirvitek
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template deploys a VPC with possibility of multi-region and two AZs

Parameters:
  Environment:
    Description: An environment name that will be prefixed to resource names
    Type: String
    AllowedValues:
      - prod
      - stag
      - dev
    ConstraintDescription: Environment is not valid
  Appname:
    Type: String
  ExportParameters:
    Description: This template allows you to expore SSM parameters
    Default: false
    Type: String
    AllowedValues: [ true, false ]
  FlowLogsEnabled:
    Description: Create flow logs for the VPC
    Default: false
    Type: String
    AllowedValues: [ true, false ]
  TrafficType:
    Description: The type of traffic to log.
    Type: String
    Default: REJECT
    AllowedValues:
      - ACCEPT
      - REJECT
      - ALL
  RetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ]

Conditions:
  ShouldCreateParameters:
    !Equals [ true, !Ref ExportParameters ]
  ShouldCreateFlowLogs:
    !Equals [ true, !Ref FlowLogsEnabled ]
  ShouldCreateFlowLogsParameters:
    !And [ Condition: ShouldCreateFlowLogs, Condition: ShouldCreateParameters]

Mappings:
  Variables:
    # Add or modify your region
    # You can add as many regions as you need
    us-west-2:
      VpcCIDR: 10.192.0.0/16
      PublicSubnet1CIDR: 10.192.10.0/24
      PublicSubnet2CIDR: 10.192.11.0/24
      PrivateSubnet1CIDR: 10.192.12.0/24
      PrivateSubnet2CIDR: 10.192.13.0/24
    eu-west-2:
      VpcCIDR: 10.193.0.0/16
      PublicSubnet1CIDR: 10.193.10.0/24
      PublicSubnet2CIDR: 10.193.11.0/24
      PrivateSubnet1CIDR: 10.195.12.0/24
      PrivateSubnet2CIDR: 10.195.13.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - Variables
        - !Ref AWS::Region
        - VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !FindInMap
            - Variables
            - !Ref AWS::Region
            - VpcCIDR
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !FindInMap
            - Variables
            - !Ref AWS::Region
            - VpcCIDR
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !FindInMap
        - Variables
        - !Ref AWS::Region
        - PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: publicSubnet1
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network
        - Key: description
          Value: !Sub ${Environment} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !FindInMap
        - Variables
        - !Ref AWS::Region
        - PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: publicSubnet2
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network
        - Key: description
          Value: !Sub ${Environment} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !FindInMap
        - Variables
        - !Ref AWS::Region
        - PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: privateSubnet1
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network
        - Key: description
          Value: !Sub ${Environment} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !FindInMap
        - Variables
        - !Ref AWS::Region
        - PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: privateSubnet2
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: security
        - Key: description
          Value: !Sub ${Environment} Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: publicRouteTable
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: network
        - Key: env
          Value: !Ref Environment

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: privateRouteTable
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: network
        - Key: env
          Value: !Ref Environment

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2


  # ======= FLOW LOGS =========
  Role:
    Type: AWS::IAM::Role
    Condition: ShouldCreateFlowLogs
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'flowlogs-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt LogGroup.Arn
  LogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateFlowLogs
    Properties:
      RetentionInDays: !Ref RetentionInDays

  FlowLog:
    Type: AWS::EC2::FlowLog
    Condition: ShouldCreateFlowLogs
    Properties:
      DeliverLogsPermissionArn: !GetAtt Role.Arn
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: !Ref TrafficType

  # ======= PARAMETERS =========
  # Save all exported parameters to SSM

  VPCID:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-vpc-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: VpcId
      Type: String
      Value: !Ref VPC

  PublicSubnetId1:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-publicSubnet1-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PublicSubnetId1
      Type: String
      Value: !Ref PublicSubnet1

  PublicSubnetId2:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-publicSubnet2-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PublicSubnetId2
      Type: String
      Value: !Ref PublicSubnet2

  PrivateSubnetId1:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-privateSubnet1-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PrivateSubnetId1
      Type: String
      Value: !Ref PublicSubnet1

  PrivateSubnetId2:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-privateSubnet2-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PrivateSubnetId2
      Type: String
      Value: !Ref PrivateSubnet2

  FlowLogsArn:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateFlowLogsParameters
    Properties:
      Name: !Sub ${AWS::StackName}-flowlogs-arn
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PrivateSubnetId2
      Type: String
      Value: !GetAtt LogGroup.Arn


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  LogGroupARN:
    Description: The ARN of the CloudWatch Logs log group where Amazon EC2 publishes your flow logs
    Value: !If [ ShouldCreateFlowLogsParameters, !GetAtt LogGroup.Arn, AWS::NoValue ]
