AWSTemplateFormatVersion: "2010-09-09"
Description: This template deploys a VPC in two AZs
Parameters:
  Environment:
    Description: An environment name that will be prefixed to resource names
    Type: String
    AllowedValues:
      - prod
      - stag
      - dev
    ConstraintDescription: Environment is not valid
  Appname:
    Type: String
  ExportParameters:
    Description: This template allows you to export SSM parameters
    Default: false
    Type: String
    AllowedValues: [ true, false ]
  FlowLogsEnabled:
    Description: Create flow logs for the VPC
    Default: false
    Type: String
    AllowedValues: [ true, false ]
  ClassB:
    Description: Class B of VPC (10.XXX.0.0/16)
    Type: Number
    Default: 0
    ConstraintDescription: Must be in the range [0-255]
    MinValue: 0
    MaxValue: 255
  TrafficType:
    Description: The type of traffic to log
    Type: String
    Default: REJECT
    AllowedValues:
      - ACCEPT
      - REJECT
      - ALL
  RetentionInDays:
    Description: Specifies the number of days you want to retain log events
    Type: Number
    Default: 14
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ]

Conditions:
  ShouldCreateParameters:
    !Equals [ true, !Ref ExportParameters ]
  ShouldCreateFlowLogs:
    !Equals [ true, !Ref FlowLogsEnabled ]
  ShouldCreateFlowLogsParameters:
    !And [ Condition: ShouldCreateFlowLogs, Condition: ShouldCreateParameters]


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '10.${ClassB}.0.0/16'
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '10.${ClassB}.0.0/16'
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPC}-publicSubnet1
        - Key: Cidr
          Value: !Sub '10.${ClassB}.0.0/20'
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network
        - Key: description
          Value: !Sub ${Environment} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPC}-publicSubnet2
        - Key: Cidr
          Value: !Sub '10.${ClassB}.16.0/20'
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network
        - Key: description
          Value: !Sub ${Environment} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPC}-privateSubnet1
        - Key: Cidr
          Value: !Sub '10.${ClassB}.32.0/20'
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: network
        - Key: description
          Value: !Sub ${Environment} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPC}-privateSubnet2
        - Key: Cidr
          Value: !Sub '10.${ClassB}.48.0/20'
        - Key: app
          Value: !Ref Appname
        - Key: env
          Value: !Ref Environment
        - Key: type
          Value: security
        - Key: description
          Value: !Sub ${Environment} Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPC}-publicRouteTable
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: network
        - Key: env
          Value: !Ref Environment

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPC}-privateRouteTable
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: network
        - Key: env
          Value: !Ref Environment

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2


  # ======= FLOW LOGS =========
  Role:
    Type: AWS::IAM::Role
    Condition: ShouldCreateFlowLogs
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'flowlogs-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt LogGroup.Arn
  LogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateFlowLogs
    Properties:
      LogGroupName: !Sub /aws/vpc/${VPC}/flowlogs
      RetentionInDays: !Ref RetentionInDays

  FlowLog:
    Type: AWS::EC2::FlowLog
    Condition: ShouldCreateFlowLogs
    Properties:
      DeliverLogsPermissionArn: !GetAtt Role.Arn
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: !Ref TrafficType

  # ======= PARAMETERS =========
  # Save all exported parameters to SSM

  VPCID:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-vpc-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: VpcId
      Type: String
      Value: !Ref VPC

  PublicSubnetId1:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-publicSubnet1-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PublicSubnetId1
      Type: String
      Value: !Ref PublicSubnet1

  PublicSubnetId2:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-publicSubnet2-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PublicSubnetId2
      Type: String
      Value: !Ref PublicSubnet2

  PrivateSubnetId1:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-privateSubnet1-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PrivateSubnetId1
      Type: String
      Value: !Ref PublicSubnet1

  PrivateSubnetId2:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateParameters
    Properties:
      Name: !Sub ${AWS::StackName}-privateSubnet2-id
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PrivateSubnetId2
      Type: String
      Value: !Ref PrivateSubnet2

  FlowLogsArn:
    Type: AWS::SSM::Parameter
    Condition: ShouldCreateFlowLogsParameters
    Properties:
      Name: !Sub ${AWS::StackName}-flowlogs-arn
      Tags:
        app: !Ref Appname
        env: !Ref Environment
        type: parameter
        description: PrivateSubnetId2
      Type: String
      Value: !GetAtt LogGroup.Arn


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  LogGroupARN:
    Description: The ARN of the CloudWatch Logs log group where Amazon EC2 publishes your flow logs
    Value: !If [ ShouldCreateFlowLogsParameters, !GetAtt LogGroup.Arn, AWS::NoValue ]
