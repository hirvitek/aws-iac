AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "template for Postgres event listener for realtime system"

# https://github.com/aws-samples/session-manager-without-igw/blob/main/session-manager-without-igw.yml
# https://github.com/kheriox-technologies/go-bastionless

Parameters:
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Mappings:
  Variables:
    dev:
      PrivateSubnet1: ""
      PrivateSubnet2: ""
      VpcId: ""
      VpcCdr: ""
      DBSecurityGroupId: ""
      InstanceType: ""

Resources:
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds:
        - !FindInMap [ Variables, !Ref Env, PrivateSubnet1 ]
      VpcEndpointType: 'Interface'
      VpcId: !FindInMap [ Variables, !Ref Env, VpcId ]

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds:
        - !FindInMap [ Variables, !Ref Env, PrivateSubnet1 ]
      VpcEndpointType: 'Interface'
      VpcId: !FindInMap [ Variables, !Ref Env, VpcId ]

  Ec2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: True
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds:
        - !FindInMap [ Variables, !Ref Env, PrivateSubnet1 ]
      VpcEndpointType: 'Interface'
      VpcId: !FindInMap [ Variables, !Ref Env, VpcId ]

  EC2Bastion:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !FindInMap [ Variables, !Ref Env, PrivateSubnet1 ]
      SecurityGroupIds:
        - !Ref EC2BastionSecurityGroup
      InstanceType: !FindInMap [ Variables, !Ref Env, InstanceType ]
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2BastionProfile
      KeyName: !Sub ${AWS::StackName}
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
        - Key: env
          Value: !Ref Env
        - Key: type
          Value: compute
        - Key: description
          Value: ec2 ssm jumper host

  EC2BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-bastion-sg-id
      VpcId: !FindInMap [ Variables, !Ref Env, VpcId ]
      GroupDescription: EC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
        - Key: env
          Value: !Ref Env
        - Key: type
          Value: network
      # Despite this security group containing no ingress rules, Session
      # Manager can still provide shell access
      SecurityGroupEgress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow outbound HTTPS to the VPC
          CidrIp: !FindInMap [ Variables, !Ref Env, VpcCdr ]
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - Description: allow outboun traffic to RDS
          DestinationSecurityGroupId: !FindInMap [ Variables, !Ref Env, DBSecurityGroupId ]
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !FindInMap [ Variables, !Ref Env, VpcId ]
      GroupDescription: EC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
        - Key: env
          Value: !Ref Env
        - Key: type
          Value: network
      SecurityGroupIngress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow inbound HTTPS from the EC2 instance
          SourceSecurityGroupId: !Ref EC2BastionSecurityGroup
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow outbound HTTPS to the VPC
          CidrIp: !FindInMap [ Variables, !Ref Env, VpcCdr ]
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  EC2BastionProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2BastionRole

  EC2BastionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
        - Key: env
          Value: !Ref Env
        - Key: type
          Value: security
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !FindInMap [ Variables, !Ref Env, VpcId ]

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !FindInMap [ Variables, !Ref Env, PrivateSubnet1 ]